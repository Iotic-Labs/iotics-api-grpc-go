// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: iotics/api/host.proto

package ioticsapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HostAPIClient is the client API for HostAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HostAPIClient interface {
	// GetHostID gets the ID of the host twin.
	GetHostID(ctx context.Context, in *GetHostIDRequest, opts ...grpc.CallOption) (*GetHostIDResponse, error)
	// IsHostDataAllowed determines whether a remote host is allowed to perform data requests against the given twin.
	// An example of a data request is interest.SendInputMessage
	IsHostDataAllowed(ctx context.Context, in *IsHostDataAllowedRequest, opts ...grpc.CallOption) (*IsHostDataAllowedResponse, error)
	// IsHostMetaAllowed determines whether a remote host is allowed to perform meta requests against the given twin.
	// An example of a meta(data) request is twin.DescribeTwin
	IsHostMetaAllowed(ctx context.Context, in *IsHostMetaAllowedRequest, opts ...grpc.CallOption) (*IsHostMetaAllowedResponse, error)
}

type hostAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewHostAPIClient(cc grpc.ClientConnInterface) HostAPIClient {
	return &hostAPIClient{cc}
}

func (c *hostAPIClient) GetHostID(ctx context.Context, in *GetHostIDRequest, opts ...grpc.CallOption) (*GetHostIDResponse, error) {
	out := new(GetHostIDResponse)
	err := c.cc.Invoke(ctx, "/iotics.api.HostAPI/GetHostID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostAPIClient) IsHostDataAllowed(ctx context.Context, in *IsHostDataAllowedRequest, opts ...grpc.CallOption) (*IsHostDataAllowedResponse, error) {
	out := new(IsHostDataAllowedResponse)
	err := c.cc.Invoke(ctx, "/iotics.api.HostAPI/IsHostDataAllowed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostAPIClient) IsHostMetaAllowed(ctx context.Context, in *IsHostMetaAllowedRequest, opts ...grpc.CallOption) (*IsHostMetaAllowedResponse, error) {
	out := new(IsHostMetaAllowedResponse)
	err := c.cc.Invoke(ctx, "/iotics.api.HostAPI/IsHostMetaAllowed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HostAPIServer is the server API for HostAPI service.
// All implementations should embed UnimplementedHostAPIServer
// for forward compatibility
type HostAPIServer interface {
	// GetHostID gets the ID of the host twin.
	GetHostID(context.Context, *GetHostIDRequest) (*GetHostIDResponse, error)
	// IsHostDataAllowed determines whether a remote host is allowed to perform data requests against the given twin.
	// An example of a data request is interest.SendInputMessage
	IsHostDataAllowed(context.Context, *IsHostDataAllowedRequest) (*IsHostDataAllowedResponse, error)
	// IsHostMetaAllowed determines whether a remote host is allowed to perform meta requests against the given twin.
	// An example of a meta(data) request is twin.DescribeTwin
	IsHostMetaAllowed(context.Context, *IsHostMetaAllowedRequest) (*IsHostMetaAllowedResponse, error)
}

// UnimplementedHostAPIServer should be embedded to have forward compatible implementations.
type UnimplementedHostAPIServer struct {
}

func (UnimplementedHostAPIServer) GetHostID(context.Context, *GetHostIDRequest) (*GetHostIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostID not implemented")
}
func (UnimplementedHostAPIServer) IsHostDataAllowed(context.Context, *IsHostDataAllowedRequest) (*IsHostDataAllowedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsHostDataAllowed not implemented")
}
func (UnimplementedHostAPIServer) IsHostMetaAllowed(context.Context, *IsHostMetaAllowedRequest) (*IsHostMetaAllowedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsHostMetaAllowed not implemented")
}

// UnsafeHostAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HostAPIServer will
// result in compilation errors.
type UnsafeHostAPIServer interface {
	mustEmbedUnimplementedHostAPIServer()
}

func RegisterHostAPIServer(s grpc.ServiceRegistrar, srv HostAPIServer) {
	s.RegisterService(&HostAPI_ServiceDesc, srv)
}

func _HostAPI_GetHostID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostAPIServer).GetHostID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotics.api.HostAPI/GetHostID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostAPIServer).GetHostID(ctx, req.(*GetHostIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostAPI_IsHostDataAllowed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsHostDataAllowedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostAPIServer).IsHostDataAllowed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotics.api.HostAPI/IsHostDataAllowed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostAPIServer).IsHostDataAllowed(ctx, req.(*IsHostDataAllowedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostAPI_IsHostMetaAllowed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsHostMetaAllowedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostAPIServer).IsHostMetaAllowed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotics.api.HostAPI/IsHostMetaAllowed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostAPIServer).IsHostMetaAllowed(ctx, req.(*IsHostMetaAllowedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HostAPI_ServiceDesc is the grpc.ServiceDesc for HostAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HostAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "iotics.api.HostAPI",
	HandlerType: (*HostAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHostID",
			Handler:    _HostAPI_GetHostID_Handler,
		},
		{
			MethodName: "IsHostDataAllowed",
			Handler:    _HostAPI_IsHostDataAllowed_Handler,
		},
		{
			MethodName: "IsHostMetaAllowed",
			Handler:    _HostAPI_IsHostMetaAllowed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iotics/api/host.proto",
}
