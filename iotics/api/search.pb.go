// Copyright (c) 2019-2022 Iotic Labs Ltd. All rights reserved.

// Iotics Web protocol definitions (search)

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: iotics/api/search.proto

package ioticsapi

import (
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ResponseType describes the type of the search response.
// - FULL - Returns full responses including twins, feeds and inputs identifiers, properties and location
// - LOCATED - Returns located responses including twins identifier, location and label (for the provided language or default)
// - MINIMAL - Returns minimal responses including twins identifier only
type ResponseType int32

const (
	ResponseType_FULL    ResponseType = 0
	ResponseType_LOCATED ResponseType = 1
	ResponseType_MINIMAL ResponseType = 2
)

// Enum value maps for ResponseType.
var (
	ResponseType_name = map[int32]string{
		0: "FULL",
		1: "LOCATED",
		2: "MINIMAL",
	}
	ResponseType_value = map[string]int32{
		"FULL":    0,
		"LOCATED": 1,
		"MINIMAL": 2,
	}
)

func (x ResponseType) Enum() *ResponseType {
	p := new(ResponseType)
	*p = x
	return p
}

func (x ResponseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseType) Descriptor() protoreflect.EnumDescriptor {
	return file_iotics_api_search_proto_enumTypes[0].Descriptor()
}

func (ResponseType) Type() protoreflect.EnumType {
	return &file_iotics_api_search_proto_enumTypes[0]
}

func (x ResponseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseType.Descriptor instead.
func (ResponseType) EnumDescriptor() ([]byte, []int) {
	return file_iotics_api_search_proto_rawDescGZIP(), []int{0}
}

// SearchRequest describes a search request used for both synchronous and asynchronous search.
type SearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Search request headers
	Headers *Headers `protobuf:"bytes,1,opt,name=headers,proto3" json:"headers,omitempty"`
	// Search request scope
	Scope Scope `protobuf:"varint,2,opt,name=scope,proto3,enum=iotics.api.Scope" json:"scope,omitempty"`
	// Search request language, applicable to text filtering. If not specified, text search will match any language.
	Lang *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=lang,proto3" json:"lang,omitempty"`
	// Search request payload
	Payload *SearchRequest_Payload `protobuf:"bytes,6,opt,name=payload,proto3" json:"payload,omitempty"`
	// Search request range
	Range *Range `protobuf:"bytes,20,opt,name=range,proto3" json:"range,omitempty"`
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iotics_api_search_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iotics_api_search_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_iotics_api_search_proto_rawDescGZIP(), []int{0}
}

func (x *SearchRequest) GetHeaders() *Headers {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *SearchRequest) GetScope() Scope {
	if x != nil {
		return x.Scope
	}
	return Scope_GLOBAL
}

func (x *SearchRequest) GetLang() *wrapperspb.StringValue {
	if x != nil {
		return x.Lang
	}
	return nil
}

func (x *SearchRequest) GetPayload() *SearchRequest_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *SearchRequest) GetRange() *Range {
	if x != nil {
		return x.Range
	}
	return nil
}

// AdvancedSearchRequest describes a search request with more filtering possibilities than SearchRequest. It returns
// formatted details about the twins matched by the supplied filter.
type AdvancedSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Search request headers
	Headers *Headers `protobuf:"bytes,1,opt,name=headers,proto3" json:"headers,omitempty"`
	// Search request scope
	Scope Scope `protobuf:"varint,2,opt,name=scope,proto3,enum=iotics.api.Scope" json:"scope,omitempty"`
	// Search request payload
	Payload *AdvancedSearchRequest_Payload `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	// Search request range
	Range *Range `protobuf:"bytes,20,opt,name=range,proto3" json:"range,omitempty"`
}

func (x *AdvancedSearchRequest) Reset() {
	*x = AdvancedSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iotics_api_search_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvancedSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvancedSearchRequest) ProtoMessage() {}

func (x *AdvancedSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iotics_api_search_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvancedSearchRequest.ProtoReflect.Descriptor instead.
func (*AdvancedSearchRequest) Descriptor() ([]byte, []int) {
	return file_iotics_api_search_proto_rawDescGZIP(), []int{1}
}

func (x *AdvancedSearchRequest) GetHeaders() *Headers {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *AdvancedSearchRequest) GetScope() Scope {
	if x != nil {
		return x.Scope
	}
	return Scope_GLOBAL
}

func (x *AdvancedSearchRequest) GetPayload() *AdvancedSearchRequest_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *AdvancedSearchRequest) GetRange() *Range {
	if x != nil {
		return x.Range
	}
	return nil
}

// SearchResponse describes a result associated to a search request.
// It contains all the matching twins/feeds/inputs according to the request scope/range/lang/filters in the expected response type format.
// In the decentralised iotics operating environment, each node in the network generates a response and the client is expected to
// receive a stream of response messages.
type SearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Headers *Headers `protobuf:"bytes,1,opt,name=headers,proto3" json:"headers,omitempty"`
	// Search response payload
	Payload *SearchResponse_Payload `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *SearchResponse) Reset() {
	*x = SearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iotics_api_search_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse) ProtoMessage() {}

func (x *SearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iotics_api_search_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse.ProtoReflect.Descriptor instead.
func (*SearchResponse) Descriptor() ([]byte, []int) {
	return file_iotics_api_search_proto_rawDescGZIP(), []int{2}
}

func (x *SearchResponse) GetHeaders() *Headers {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *SearchResponse) GetPayload() *SearchResponse_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

// Dispatch Search Response message.
type DispatchSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DispatchSearchResponse) Reset() {
	*x = DispatchSearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iotics_api_search_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DispatchSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DispatchSearchResponse) ProtoMessage() {}

func (x *DispatchSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iotics_api_search_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DispatchSearchResponse.ProtoReflect.Descriptor instead.
func (*DispatchSearchResponse) Descriptor() ([]byte, []int) {
	return file_iotics_api_search_proto_rawDescGZIP(), []int{3}
}

// Search request payload.
type SearchRequest_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Expected response type
	ResponseType ResponseType `protobuf:"varint,1,opt,name=responseType,proto3,enum=iotics.api.ResponseType" json:"responseType,omitempty"`
	// UTC time (millis from epoch / unix time) when this search request has to be considered expired.
	ExpiryTimeout *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=expiryTimeout,proto3" json:"expiryTimeout,omitempty"`
	// Search Request filters
	Filter *SearchRequest_Payload_Filter `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *SearchRequest_Payload) Reset() {
	*x = SearchRequest_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iotics_api_search_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest_Payload) ProtoMessage() {}

func (x *SearchRequest_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_iotics_api_search_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest_Payload.ProtoReflect.Descriptor instead.
func (*SearchRequest_Payload) Descriptor() ([]byte, []int) {
	return file_iotics_api_search_proto_rawDescGZIP(), []int{0, 0}
}

func (x *SearchRequest_Payload) GetResponseType() ResponseType {
	if x != nil {
		return x.ResponseType
	}
	return ResponseType_FULL
}

func (x *SearchRequest_Payload) GetExpiryTimeout() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiryTimeout
	}
	return nil
}

func (x *SearchRequest_Payload) GetFilter() *SearchRequest_Payload_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

// Search request filters, any of these can be used in combination or on their own.
type SearchRequest_Payload_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Text filtering. One or more keywords which must match text from twin properties. Note that any (rather than all)
	// of the keywords will produce a match.
	Text *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// Location filtering: area within which twins must be located
	Location *GeoCircle `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	// Properties filtering: one or more exact properties, all of which twins must have.
	Properties []*Property `protobuf:"bytes,3,rep,name=properties,proto3" json:"properties,omitempty"`
}

func (x *SearchRequest_Payload_Filter) Reset() {
	*x = SearchRequest_Payload_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iotics_api_search_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest_Payload_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest_Payload_Filter) ProtoMessage() {}

func (x *SearchRequest_Payload_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_iotics_api_search_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest_Payload_Filter.ProtoReflect.Descriptor instead.
func (*SearchRequest_Payload_Filter) Descriptor() ([]byte, []int) {
	return file_iotics_api_search_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *SearchRequest_Payload_Filter) GetText() *wrapperspb.StringValue {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *SearchRequest_Payload_Filter) GetLocation() *GeoCircle {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *SearchRequest_Payload_Filter) GetProperties() []*Property {
	if x != nil {
		return x.Properties
	}
	return nil
}

// Search request payload.
type AdvancedSearchRequest_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Expected response type
	ResponseType ResponseType `protobuf:"varint,1,opt,name=responseType,proto3,enum=iotics.api.ResponseType" json:"responseType,omitempty"`
	// The search filter, expressed as a JSON-encoded AST (in JSONLogic style)
	Filter string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *AdvancedSearchRequest_Payload) Reset() {
	*x = AdvancedSearchRequest_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iotics_api_search_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvancedSearchRequest_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvancedSearchRequest_Payload) ProtoMessage() {}

func (x *AdvancedSearchRequest_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_iotics_api_search_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvancedSearchRequest_Payload.ProtoReflect.Descriptor instead.
func (*AdvancedSearchRequest_Payload) Descriptor() ([]byte, []int) {
	return file_iotics_api_search_proto_rawDescGZIP(), []int{1, 0}
}

func (x *AdvancedSearchRequest_Payload) GetResponseType() ResponseType {
	if x != nil {
		return x.ResponseType
	}
	return ResponseType_FULL
}

func (x *AdvancedSearchRequest_Payload) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// Search response feed details. Included with response type: FULL.
type SearchResponse_FeedDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Feed
	FeedId *FeedID `protobuf:"bytes,1,opt,name=feedId,proto3" json:"feedId,omitempty"`
	// whether offers the ability to store last received value
	StoreLast bool `protobuf:"varint,3,opt,name=storeLast,proto3" json:"storeLast,omitempty"`
	// Feed custom properties.
	Properties []*Property `protobuf:"bytes,4,rep,name=properties,proto3" json:"properties,omitempty"`
}

func (x *SearchResponse_FeedDetails) Reset() {
	*x = SearchResponse_FeedDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iotics_api_search_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResponse_FeedDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse_FeedDetails) ProtoMessage() {}

func (x *SearchResponse_FeedDetails) ProtoReflect() protoreflect.Message {
	mi := &file_iotics_api_search_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse_FeedDetails.ProtoReflect.Descriptor instead.
func (*SearchResponse_FeedDetails) Descriptor() ([]byte, []int) {
	return file_iotics_api_search_proto_rawDescGZIP(), []int{2, 0}
}

func (x *SearchResponse_FeedDetails) GetFeedId() *FeedID {
	if x != nil {
		return x.FeedId
	}
	return nil
}

func (x *SearchResponse_FeedDetails) GetStoreLast() bool {
	if x != nil {
		return x.StoreLast
	}
	return false
}

func (x *SearchResponse_FeedDetails) GetProperties() []*Property {
	if x != nil {
		return x.Properties
	}
	return nil
}

// Search response input details. Included with response type: FULL.
type SearchResponse_InputDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input
	InputId *InputID `protobuf:"bytes,1,opt,name=inputId,proto3" json:"inputId,omitempty"`
	// Input custom properties.
	Properties []*Property `protobuf:"bytes,4,rep,name=properties,proto3" json:"properties,omitempty"`
}

func (x *SearchResponse_InputDetails) Reset() {
	*x = SearchResponse_InputDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iotics_api_search_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResponse_InputDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse_InputDetails) ProtoMessage() {}

func (x *SearchResponse_InputDetails) ProtoReflect() protoreflect.Message {
	mi := &file_iotics_api_search_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse_InputDetails.ProtoReflect.Descriptor instead.
func (*SearchResponse_InputDetails) Descriptor() ([]byte, []int) {
	return file_iotics_api_search_proto_rawDescGZIP(), []int{2, 1}
}

func (x *SearchResponse_InputDetails) GetInputId() *InputID {
	if x != nil {
		return x.InputId
	}
	return nil
}

func (x *SearchResponse_InputDetails) GetProperties() []*Property {
	if x != nil {
		return x.Properties
	}
	return nil
}

// Search response twin details.
type SearchResponse_TwinDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Twin identifier. Included with response type: FULL, LOCATED and MINIMAL
	TwinId *TwinID `protobuf:"bytes,1,opt,name=twinId,proto3" json:"twinId,omitempty"`
	// Twin location (if set). Included with response type: FULL and LOCATED
	Location *GeoLocation `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	// Twin custom properties.
	Properties []*Property `protobuf:"bytes,5,rep,name=properties,proto3" json:"properties,omitempty"`
	// Feed details. Included with response type: FULL
	Feeds []*SearchResponse_FeedDetails `protobuf:"bytes,10,rep,name=feeds,proto3" json:"feeds,omitempty"`
	// Input details. Included with response type: FULL
	Inputs []*SearchResponse_InputDetails `protobuf:"bytes,11,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// Twin createdAt timestamp.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	// Twin updatedAt timestamp.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *SearchResponse_TwinDetails) Reset() {
	*x = SearchResponse_TwinDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iotics_api_search_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResponse_TwinDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse_TwinDetails) ProtoMessage() {}

func (x *SearchResponse_TwinDetails) ProtoReflect() protoreflect.Message {
	mi := &file_iotics_api_search_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse_TwinDetails.ProtoReflect.Descriptor instead.
func (*SearchResponse_TwinDetails) Descriptor() ([]byte, []int) {
	return file_iotics_api_search_proto_rawDescGZIP(), []int{2, 2}
}

func (x *SearchResponse_TwinDetails) GetTwinId() *TwinID {
	if x != nil {
		return x.TwinId
	}
	return nil
}

func (x *SearchResponse_TwinDetails) GetLocation() *GeoLocation {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *SearchResponse_TwinDetails) GetProperties() []*Property {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *SearchResponse_TwinDetails) GetFeeds() []*SearchResponse_FeedDetails {
	if x != nil {
		return x.Feeds
	}
	return nil
}

func (x *SearchResponse_TwinDetails) GetInputs() []*SearchResponse_InputDetails {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *SearchResponse_TwinDetails) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SearchResponse_TwinDetails) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// Search Response Payload.
type SearchResponse_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of the response.
	ResponseType ResponseType `protobuf:"varint,1,opt,name=responseType,proto3,enum=iotics.api.ResponseType" json:"responseType,omitempty"`
	// Response status - if present indicates that this response is invalid
	Status *status.Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// Host identifier string representation
	HostId string `protobuf:"bytes,3,opt,name=hostId,proto3" json:"hostId,omitempty"`
	// Matching twins
	Twins []*SearchResponse_TwinDetails `protobuf:"bytes,10,rep,name=twins,proto3" json:"twins,omitempty"`
}

func (x *SearchResponse_Payload) Reset() {
	*x = SearchResponse_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iotics_api_search_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResponse_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse_Payload) ProtoMessage() {}

func (x *SearchResponse_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_iotics_api_search_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse_Payload.ProtoReflect.Descriptor instead.
func (*SearchResponse_Payload) Descriptor() ([]byte, []int) {
	return file_iotics_api_search_proto_rawDescGZIP(), []int{2, 3}
}

func (x *SearchResponse_Payload) GetResponseType() ResponseType {
	if x != nil {
		return x.ResponseType
	}
	return ResponseType_FULL
}

func (x *SearchResponse_Payload) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SearchResponse_Payload) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *SearchResponse_Payload) GetTwins() []*SearchResponse_TwinDetails {
	if x != nil {
		return x.Twins
	}
	return nil
}

var File_iotics_api_search_proto protoreflect.FileDescriptor

var file_iotics_api_search_proto_rawDesc = []byte{
	0x0a, 0x17, 0x69, 0x6f, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x69, 0x6f, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72,
	0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x69, 0x6f, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x69, 0x6f, 0x74, 0x69, 0x63, 0x73,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x16, 0x69, 0x6f, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf3, 0x04, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x69, 0x6f, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x30, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6c,
	0x61, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6f, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x27, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x69, 0x6f, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0xf1, 0x02, 0x0a, 0x07, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x69, 0x6f,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x40, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0xa3, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6f, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x6f, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6f,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0xbe, 0x02,
	0x0a, 0x15, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x69, 0x6f, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12,
	0x43, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x69, 0x6f, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x64,
	0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x27, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6f, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x5f, 0x0a,
	0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x69, 0x6f, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xe8,
	0x07, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2d, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x3c, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6f, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x8d,
	0x01, 0x0a, 0x0b, 0x46, 0x65, 0x65, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2a,
	0x0a, 0x06, 0x66, 0x65, 0x65, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x69, 0x6f, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x65, 0x65, 0x64,
	0x49, 0x44, 0x52, 0x06, 0x66, 0x65, 0x65, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69,
	0x6f, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x73,
	0x0a, 0x0c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2d,
	0x0a, 0x07, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x69, 0x6f, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x49, 0x44, 0x52, 0x07, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6f, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x1a, 0x97, 0x03, 0x0a, 0x0b, 0x54, 0x77, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x77, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6f, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x54, 0x77, 0x69, 0x6e, 0x49, 0x44, 0x52, 0x06, 0x74, 0x77, 0x69, 0x6e, 0x49, 0x64, 0x12,
	0x33, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6f, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6f, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x05, 0x66, 0x65,
	0x65, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6f, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x05, 0x66, 0x65, 0x65, 0x64, 0x73, 0x12, 0x3f, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6f, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x1a, 0xc9, 0x01,
	0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x69, 0x6f, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x74,
	0x77, 0x69, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6f, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x77, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x05, 0x74, 0x77, 0x69, 0x6e, 0x73, 0x22, 0x18, 0x0a, 0x16, 0x44, 0x69, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2a, 0x32, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x49,
	0x4e, 0x49, 0x4d, 0x41, 0x4c, 0x10, 0x02, 0x32, 0xe8, 0x02, 0x0a, 0x09, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x41, 0x50, 0x49, 0x12, 0x58, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x2e, 0x69, 0x6f, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x69, 0x6f, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x4e, 0x0a, 0x11, 0x53, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x12, 0x19, 0x2e, 0x69, 0x6f, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x69, 0x6f, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x5c, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x69,
	0x6f, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x1a, 0x2e,
	0x69, 0x6f, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x53, 0x0a,
	0x0e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x21, 0x2e, 0x69, 0x6f, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x64, 0x76,
	0x61, 0x6e, 0x63, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x69, 0x6f, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x30, 0x01, 0x42, 0x7f, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x42, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x49, 0x6f, 0x74, 0x69, 0x63, 0x2d, 0x4c, 0x61, 0x62, 0x73, 0x2f, 0x69, 0x6f, 0x74, 0x69, 0x63,
	0x2d, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x71, 0x61, 0x70, 0x69, 0x2f, 0x69,
	0x6f, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x3b, 0x69, 0x6f, 0x74, 0x69, 0x63, 0x73,
	0x61, 0x70, 0x69, 0xa2, 0x02, 0x03, 0x49, 0x41, 0x58, 0xaa, 0x02, 0x0a, 0x49, 0x6f, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x41, 0x70, 0x69, 0xca, 0x02, 0x0a, 0x49, 0x6f, 0x74, 0x69, 0x63, 0x73, 0x5c,
	0x41, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_iotics_api_search_proto_rawDescOnce sync.Once
	file_iotics_api_search_proto_rawDescData = file_iotics_api_search_proto_rawDesc
)

func file_iotics_api_search_proto_rawDescGZIP() []byte {
	file_iotics_api_search_proto_rawDescOnce.Do(func() {
		file_iotics_api_search_proto_rawDescData = protoimpl.X.CompressGZIP(file_iotics_api_search_proto_rawDescData)
	})
	return file_iotics_api_search_proto_rawDescData
}

var file_iotics_api_search_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_iotics_api_search_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_iotics_api_search_proto_goTypes = []interface{}{
	(ResponseType)(0),                     // 0: iotics.api.ResponseType
	(*SearchRequest)(nil),                 // 1: iotics.api.SearchRequest
	(*AdvancedSearchRequest)(nil),         // 2: iotics.api.AdvancedSearchRequest
	(*SearchResponse)(nil),                // 3: iotics.api.SearchResponse
	(*DispatchSearchResponse)(nil),        // 4: iotics.api.DispatchSearchResponse
	(*SearchRequest_Payload)(nil),         // 5: iotics.api.SearchRequest.Payload
	(*SearchRequest_Payload_Filter)(nil),  // 6: iotics.api.SearchRequest.Payload.Filter
	(*AdvancedSearchRequest_Payload)(nil), // 7: iotics.api.AdvancedSearchRequest.Payload
	(*SearchResponse_FeedDetails)(nil),    // 8: iotics.api.SearchResponse.FeedDetails
	(*SearchResponse_InputDetails)(nil),   // 9: iotics.api.SearchResponse.InputDetails
	(*SearchResponse_TwinDetails)(nil),    // 10: iotics.api.SearchResponse.TwinDetails
	(*SearchResponse_Payload)(nil),        // 11: iotics.api.SearchResponse.Payload
	(*Headers)(nil),                       // 12: iotics.api.Headers
	(Scope)(0),                            // 13: iotics.api.Scope
	(*wrapperspb.StringValue)(nil),        // 14: google.protobuf.StringValue
	(*Range)(nil),                         // 15: iotics.api.Range
	(*timestamppb.Timestamp)(nil),         // 16: google.protobuf.Timestamp
	(*GeoCircle)(nil),                     // 17: iotics.api.GeoCircle
	(*Property)(nil),                      // 18: iotics.api.Property
	(*FeedID)(nil),                        // 19: iotics.api.FeedID
	(*InputID)(nil),                       // 20: iotics.api.InputID
	(*TwinID)(nil),                        // 21: iotics.api.TwinID
	(*GeoLocation)(nil),                   // 22: iotics.api.GeoLocation
	(*status.Status)(nil),                 // 23: google.rpc.Status
	(*SubscriptionHeaders)(nil),           // 24: iotics.api.SubscriptionHeaders
}
var file_iotics_api_search_proto_depIdxs = []int32{
	12, // 0: iotics.api.SearchRequest.headers:type_name -> iotics.api.Headers
	13, // 1: iotics.api.SearchRequest.scope:type_name -> iotics.api.Scope
	14, // 2: iotics.api.SearchRequest.lang:type_name -> google.protobuf.StringValue
	5,  // 3: iotics.api.SearchRequest.payload:type_name -> iotics.api.SearchRequest.Payload
	15, // 4: iotics.api.SearchRequest.range:type_name -> iotics.api.Range
	12, // 5: iotics.api.AdvancedSearchRequest.headers:type_name -> iotics.api.Headers
	13, // 6: iotics.api.AdvancedSearchRequest.scope:type_name -> iotics.api.Scope
	7,  // 7: iotics.api.AdvancedSearchRequest.payload:type_name -> iotics.api.AdvancedSearchRequest.Payload
	15, // 8: iotics.api.AdvancedSearchRequest.range:type_name -> iotics.api.Range
	12, // 9: iotics.api.SearchResponse.headers:type_name -> iotics.api.Headers
	11, // 10: iotics.api.SearchResponse.payload:type_name -> iotics.api.SearchResponse.Payload
	0,  // 11: iotics.api.SearchRequest.Payload.responseType:type_name -> iotics.api.ResponseType
	16, // 12: iotics.api.SearchRequest.Payload.expiryTimeout:type_name -> google.protobuf.Timestamp
	6,  // 13: iotics.api.SearchRequest.Payload.filter:type_name -> iotics.api.SearchRequest.Payload.Filter
	14, // 14: iotics.api.SearchRequest.Payload.Filter.text:type_name -> google.protobuf.StringValue
	17, // 15: iotics.api.SearchRequest.Payload.Filter.location:type_name -> iotics.api.GeoCircle
	18, // 16: iotics.api.SearchRequest.Payload.Filter.properties:type_name -> iotics.api.Property
	0,  // 17: iotics.api.AdvancedSearchRequest.Payload.responseType:type_name -> iotics.api.ResponseType
	19, // 18: iotics.api.SearchResponse.FeedDetails.feedId:type_name -> iotics.api.FeedID
	18, // 19: iotics.api.SearchResponse.FeedDetails.properties:type_name -> iotics.api.Property
	20, // 20: iotics.api.SearchResponse.InputDetails.inputId:type_name -> iotics.api.InputID
	18, // 21: iotics.api.SearchResponse.InputDetails.properties:type_name -> iotics.api.Property
	21, // 22: iotics.api.SearchResponse.TwinDetails.twinId:type_name -> iotics.api.TwinID
	22, // 23: iotics.api.SearchResponse.TwinDetails.location:type_name -> iotics.api.GeoLocation
	18, // 24: iotics.api.SearchResponse.TwinDetails.properties:type_name -> iotics.api.Property
	8,  // 25: iotics.api.SearchResponse.TwinDetails.feeds:type_name -> iotics.api.SearchResponse.FeedDetails
	9,  // 26: iotics.api.SearchResponse.TwinDetails.inputs:type_name -> iotics.api.SearchResponse.InputDetails
	16, // 27: iotics.api.SearchResponse.TwinDetails.createdAt:type_name -> google.protobuf.Timestamp
	16, // 28: iotics.api.SearchResponse.TwinDetails.updatedAt:type_name -> google.protobuf.Timestamp
	0,  // 29: iotics.api.SearchResponse.Payload.responseType:type_name -> iotics.api.ResponseType
	23, // 30: iotics.api.SearchResponse.Payload.status:type_name -> google.rpc.Status
	10, // 31: iotics.api.SearchResponse.Payload.twins:type_name -> iotics.api.SearchResponse.TwinDetails
	1,  // 32: iotics.api.SearchAPI.DispatchSearchRequest:input_type -> iotics.api.SearchRequest
	1,  // 33: iotics.api.SearchAPI.SynchronousSearch:input_type -> iotics.api.SearchRequest
	24, // 34: iotics.api.SearchAPI.ReceiveAllSearchResponses:input_type -> iotics.api.SubscriptionHeaders
	2,  // 35: iotics.api.SearchAPI.AdvancedSearch:input_type -> iotics.api.AdvancedSearchRequest
	4,  // 36: iotics.api.SearchAPI.DispatchSearchRequest:output_type -> iotics.api.DispatchSearchResponse
	3,  // 37: iotics.api.SearchAPI.SynchronousSearch:output_type -> iotics.api.SearchResponse
	3,  // 38: iotics.api.SearchAPI.ReceiveAllSearchResponses:output_type -> iotics.api.SearchResponse
	3,  // 39: iotics.api.SearchAPI.AdvancedSearch:output_type -> iotics.api.SearchResponse
	36, // [36:40] is the sub-list for method output_type
	32, // [32:36] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_iotics_api_search_proto_init() }
func file_iotics_api_search_proto_init() {
	if File_iotics_api_search_proto != nil {
		return
	}
	file_iotics_api_common_proto_init()
	file_iotics_api_feed_proto_init()
	file_iotics_api_input_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_iotics_api_search_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iotics_api_search_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdvancedSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iotics_api_search_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iotics_api_search_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DispatchSearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iotics_api_search_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iotics_api_search_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest_Payload_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iotics_api_search_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdvancedSearchRequest_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iotics_api_search_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchResponse_FeedDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iotics_api_search_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchResponse_InputDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iotics_api_search_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchResponse_TwinDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iotics_api_search_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchResponse_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_iotics_api_search_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_iotics_api_search_proto_goTypes,
		DependencyIndexes: file_iotics_api_search_proto_depIdxs,
		EnumInfos:         file_iotics_api_search_proto_enumTypes,
		MessageInfos:      file_iotics_api_search_proto_msgTypes,
	}.Build()
	File_iotics_api_search_proto = out.File
	file_iotics_api_search_proto_rawDesc = nil
	file_iotics_api_search_proto_goTypes = nil
	file_iotics_api_search_proto_depIdxs = nil
}
