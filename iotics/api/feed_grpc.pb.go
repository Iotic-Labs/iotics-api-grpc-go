// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ioticsapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FeedAPIClient is the client API for FeedAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeedAPIClient interface {
	// Creates a feed owned by a twin. (Idempotent)
	CreateFeed(ctx context.Context, in *CreateFeedRequest, opts ...grpc.CallOption) (*CreateFeedResponse, error)
	// Deletes a feed owned by a twin. (Idempotent)
	DeleteFeed(ctx context.Context, in *DeleteFeedRequest, opts ...grpc.CallOption) (*DeleteFeedResponse, error)
	// Updates attributes of a feed, including its metadata.
	UpdateFeed(ctx context.Context, in *UpdateFeedRequest, opts ...grpc.CallOption) (*UpdateFeedResponse, error)
	// Shares a new sample of data for the given feed which any (interest) subscribers can receive.
	ShareFeedData(ctx context.Context, in *ShareFeedDataRequest, opts ...grpc.CallOption) (*ShareFeedDataResponse, error)
	// Lists all feeds owned by a twin.
	ListAllFeeds(ctx context.Context, in *ListAllFeedsRequest, opts ...grpc.CallOption) (*ListAllFeedsResponse, error)
	// Describes a feed. (local and remote)
	DescribeFeed(ctx context.Context, in *DescribeFeedRequest, opts ...grpc.CallOption) (*DescribeFeedResponse, error)
}

type feedAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedAPIClient(cc grpc.ClientConnInterface) FeedAPIClient {
	return &feedAPIClient{cc}
}

func (c *feedAPIClient) CreateFeed(ctx context.Context, in *CreateFeedRequest, opts ...grpc.CallOption) (*CreateFeedResponse, error) {
	out := new(CreateFeedResponse)
	err := c.cc.Invoke(ctx, "/iotics.api.FeedAPI/CreateFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedAPIClient) DeleteFeed(ctx context.Context, in *DeleteFeedRequest, opts ...grpc.CallOption) (*DeleteFeedResponse, error) {
	out := new(DeleteFeedResponse)
	err := c.cc.Invoke(ctx, "/iotics.api.FeedAPI/DeleteFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedAPIClient) UpdateFeed(ctx context.Context, in *UpdateFeedRequest, opts ...grpc.CallOption) (*UpdateFeedResponse, error) {
	out := new(UpdateFeedResponse)
	err := c.cc.Invoke(ctx, "/iotics.api.FeedAPI/UpdateFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedAPIClient) ShareFeedData(ctx context.Context, in *ShareFeedDataRequest, opts ...grpc.CallOption) (*ShareFeedDataResponse, error) {
	out := new(ShareFeedDataResponse)
	err := c.cc.Invoke(ctx, "/iotics.api.FeedAPI/ShareFeedData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedAPIClient) ListAllFeeds(ctx context.Context, in *ListAllFeedsRequest, opts ...grpc.CallOption) (*ListAllFeedsResponse, error) {
	out := new(ListAllFeedsResponse)
	err := c.cc.Invoke(ctx, "/iotics.api.FeedAPI/ListAllFeeds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedAPIClient) DescribeFeed(ctx context.Context, in *DescribeFeedRequest, opts ...grpc.CallOption) (*DescribeFeedResponse, error) {
	out := new(DescribeFeedResponse)
	err := c.cc.Invoke(ctx, "/iotics.api.FeedAPI/DescribeFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedAPIServer is the server API for FeedAPI service.
// All implementations should embed UnimplementedFeedAPIServer
// for forward compatibility
type FeedAPIServer interface {
	// Creates a feed owned by a twin. (Idempotent)
	CreateFeed(context.Context, *CreateFeedRequest) (*CreateFeedResponse, error)
	// Deletes a feed owned by a twin. (Idempotent)
	DeleteFeed(context.Context, *DeleteFeedRequest) (*DeleteFeedResponse, error)
	// Updates attributes of a feed, including its metadata.
	UpdateFeed(context.Context, *UpdateFeedRequest) (*UpdateFeedResponse, error)
	// Shares a new sample of data for the given feed which any (interest) subscribers can receive.
	ShareFeedData(context.Context, *ShareFeedDataRequest) (*ShareFeedDataResponse, error)
	// Lists all feeds owned by a twin.
	ListAllFeeds(context.Context, *ListAllFeedsRequest) (*ListAllFeedsResponse, error)
	// Describes a feed. (local and remote)
	DescribeFeed(context.Context, *DescribeFeedRequest) (*DescribeFeedResponse, error)
}

// UnimplementedFeedAPIServer should be embedded to have forward compatible implementations.
type UnimplementedFeedAPIServer struct {
}

func (UnimplementedFeedAPIServer) CreateFeed(context.Context, *CreateFeedRequest) (*CreateFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeed not implemented")
}
func (UnimplementedFeedAPIServer) DeleteFeed(context.Context, *DeleteFeedRequest) (*DeleteFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFeed not implemented")
}
func (UnimplementedFeedAPIServer) UpdateFeed(context.Context, *UpdateFeedRequest) (*UpdateFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeed not implemented")
}
func (UnimplementedFeedAPIServer) ShareFeedData(context.Context, *ShareFeedDataRequest) (*ShareFeedDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareFeedData not implemented")
}
func (UnimplementedFeedAPIServer) ListAllFeeds(context.Context, *ListAllFeedsRequest) (*ListAllFeedsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllFeeds not implemented")
}
func (UnimplementedFeedAPIServer) DescribeFeed(context.Context, *DescribeFeedRequest) (*DescribeFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeFeed not implemented")
}

// UnsafeFeedAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeedAPIServer will
// result in compilation errors.
type UnsafeFeedAPIServer interface {
	mustEmbedUnimplementedFeedAPIServer()
}

func RegisterFeedAPIServer(s grpc.ServiceRegistrar, srv FeedAPIServer) {
	s.RegisterService(&FeedAPI_ServiceDesc, srv)
}

func _FeedAPI_CreateFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedAPIServer).CreateFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotics.api.FeedAPI/CreateFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedAPIServer).CreateFeed(ctx, req.(*CreateFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedAPI_DeleteFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedAPIServer).DeleteFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotics.api.FeedAPI/DeleteFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedAPIServer).DeleteFeed(ctx, req.(*DeleteFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedAPI_UpdateFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedAPIServer).UpdateFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotics.api.FeedAPI/UpdateFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedAPIServer).UpdateFeed(ctx, req.(*UpdateFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedAPI_ShareFeedData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareFeedDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedAPIServer).ShareFeedData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotics.api.FeedAPI/ShareFeedData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedAPIServer).ShareFeedData(ctx, req.(*ShareFeedDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedAPI_ListAllFeeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllFeedsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedAPIServer).ListAllFeeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotics.api.FeedAPI/ListAllFeeds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedAPIServer).ListAllFeeds(ctx, req.(*ListAllFeedsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedAPI_DescribeFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedAPIServer).DescribeFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotics.api.FeedAPI/DescribeFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedAPIServer).DescribeFeed(ctx, req.(*DescribeFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeedAPI_ServiceDesc is the grpc.ServiceDesc for FeedAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeedAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "iotics.api.FeedAPI",
	HandlerType: (*FeedAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFeed",
			Handler:    _FeedAPI_CreateFeed_Handler,
		},
		{
			MethodName: "DeleteFeed",
			Handler:    _FeedAPI_DeleteFeed_Handler,
		},
		{
			MethodName: "UpdateFeed",
			Handler:    _FeedAPI_UpdateFeed_Handler,
		},
		{
			MethodName: "ShareFeedData",
			Handler:    _FeedAPI_ShareFeedData_Handler,
		},
		{
			MethodName: "ListAllFeeds",
			Handler:    _FeedAPI_ListAllFeeds_Handler,
		},
		{
			MethodName: "DescribeFeed",
			Handler:    _FeedAPI_DescribeFeed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iotics/api/feed.proto",
}
