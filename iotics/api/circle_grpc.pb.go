// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: iotics/api/circle.proto

package ioticsapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CircleAPIClient is the client API for CircleAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CircleAPIClient interface {
	// UpsertCircle creates or update a circle with its metadata.
	// The full state is applied (ie. if the operation succeeds the state of the circle will
	// be the one described in the payload)
	UpsertCircle(ctx context.Context, in *UpsertCircleRequest, opts ...grpc.CallOption) (*UpsertCircleResponse, error)
	// DeleteCircle deletes a circle.
	DeleteCircle(ctx context.Context, in *DeleteCircleRequest, opts ...grpc.CallOption) (*DeleteCircleResponse, error)
	// Describes a circle.
	DescribeCircle(ctx context.Context, in *DescribeCircleRequest, opts ...grpc.CallOption) (*DescribeCircleResponse, error)
	// List all circles.
	ListAllCircles(ctx context.Context, in *ListAllCirclesRequest, opts ...grpc.CallOption) (*ListAllCirclesResponse, error)
}

type circleAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewCircleAPIClient(cc grpc.ClientConnInterface) CircleAPIClient {
	return &circleAPIClient{cc}
}

func (c *circleAPIClient) UpsertCircle(ctx context.Context, in *UpsertCircleRequest, opts ...grpc.CallOption) (*UpsertCircleResponse, error) {
	out := new(UpsertCircleResponse)
	err := c.cc.Invoke(ctx, "/iotics.api.CircleAPI/UpsertCircle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *circleAPIClient) DeleteCircle(ctx context.Context, in *DeleteCircleRequest, opts ...grpc.CallOption) (*DeleteCircleResponse, error) {
	out := new(DeleteCircleResponse)
	err := c.cc.Invoke(ctx, "/iotics.api.CircleAPI/DeleteCircle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *circleAPIClient) DescribeCircle(ctx context.Context, in *DescribeCircleRequest, opts ...grpc.CallOption) (*DescribeCircleResponse, error) {
	out := new(DescribeCircleResponse)
	err := c.cc.Invoke(ctx, "/iotics.api.CircleAPI/DescribeCircle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *circleAPIClient) ListAllCircles(ctx context.Context, in *ListAllCirclesRequest, opts ...grpc.CallOption) (*ListAllCirclesResponse, error) {
	out := new(ListAllCirclesResponse)
	err := c.cc.Invoke(ctx, "/iotics.api.CircleAPI/ListAllCircles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CircleAPIServer is the server API for CircleAPI service.
// All implementations should embed UnimplementedCircleAPIServer
// for forward compatibility
type CircleAPIServer interface {
	// UpsertCircle creates or update a circle with its metadata.
	// The full state is applied (ie. if the operation succeeds the state of the circle will
	// be the one described in the payload)
	UpsertCircle(context.Context, *UpsertCircleRequest) (*UpsertCircleResponse, error)
	// DeleteCircle deletes a circle.
	DeleteCircle(context.Context, *DeleteCircleRequest) (*DeleteCircleResponse, error)
	// Describes a circle.
	DescribeCircle(context.Context, *DescribeCircleRequest) (*DescribeCircleResponse, error)
	// List all circles.
	ListAllCircles(context.Context, *ListAllCirclesRequest) (*ListAllCirclesResponse, error)
}

// UnimplementedCircleAPIServer should be embedded to have forward compatible implementations.
type UnimplementedCircleAPIServer struct {
}

func (UnimplementedCircleAPIServer) UpsertCircle(context.Context, *UpsertCircleRequest) (*UpsertCircleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertCircle not implemented")
}
func (UnimplementedCircleAPIServer) DeleteCircle(context.Context, *DeleteCircleRequest) (*DeleteCircleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCircle not implemented")
}
func (UnimplementedCircleAPIServer) DescribeCircle(context.Context, *DescribeCircleRequest) (*DescribeCircleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCircle not implemented")
}
func (UnimplementedCircleAPIServer) ListAllCircles(context.Context, *ListAllCirclesRequest) (*ListAllCirclesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllCircles not implemented")
}

// UnsafeCircleAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CircleAPIServer will
// result in compilation errors.
type UnsafeCircleAPIServer interface {
	mustEmbedUnimplementedCircleAPIServer()
}

func RegisterCircleAPIServer(s grpc.ServiceRegistrar, srv CircleAPIServer) {
	s.RegisterService(&CircleAPI_ServiceDesc, srv)
}

func _CircleAPI_UpsertCircle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertCircleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CircleAPIServer).UpsertCircle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotics.api.CircleAPI/UpsertCircle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CircleAPIServer).UpsertCircle(ctx, req.(*UpsertCircleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CircleAPI_DeleteCircle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCircleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CircleAPIServer).DeleteCircle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotics.api.CircleAPI/DeleteCircle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CircleAPIServer).DeleteCircle(ctx, req.(*DeleteCircleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CircleAPI_DescribeCircle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCircleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CircleAPIServer).DescribeCircle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotics.api.CircleAPI/DescribeCircle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CircleAPIServer).DescribeCircle(ctx, req.(*DescribeCircleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CircleAPI_ListAllCircles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllCirclesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CircleAPIServer).ListAllCircles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotics.api.CircleAPI/ListAllCircles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CircleAPIServer).ListAllCircles(ctx, req.(*ListAllCirclesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CircleAPI_ServiceDesc is the grpc.ServiceDesc for CircleAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CircleAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "iotics.api.CircleAPI",
	HandlerType: (*CircleAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertCircle",
			Handler:    _CircleAPI_UpsertCircle_Handler,
		},
		{
			MethodName: "DeleteCircle",
			Handler:    _CircleAPI_DeleteCircle_Handler,
		},
		{
			MethodName: "DescribeCircle",
			Handler:    _CircleAPI_DescribeCircle_Handler,
		},
		{
			MethodName: "ListAllCircles",
			Handler:    _CircleAPI_ListAllCircles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iotics/api/circle.proto",
}
