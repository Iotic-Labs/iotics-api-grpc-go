// Copyright (c) 2019-2022 Iotic Labs Ltd. All rights reserved.

// Iotics Web protocol definitions (interests)

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: iotics/api/v2/interest.proto

package ioticsapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	InterestAPI_FetchInterests_FullMethodName   = "/iotics.api.v2.InterestAPI/FetchInterests"
	InterestAPI_FetchLastStored_FullMethodName  = "/iotics.api.v2.InterestAPI/FetchLastStored"
	InterestAPI_SendInputMessage_FullMethodName = "/iotics.api.v2.InterestAPI/SendInputMessage"
)

// InterestAPIClient is the client API for InterestAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InterestAPIClient interface {
	// Fetch feed data for this interest. (local and remote)
	FetchInterests(ctx context.Context, in *FetchInterestRequest, opts ...grpc.CallOption) (InterestAPI_FetchInterestsClient, error)
	// Fetch last data shared on this interest. (local and remote)
	FetchLastStored(ctx context.Context, in *FetchLastStoredRequest, opts ...grpc.CallOption) (*FetchInterestResponse, error)
	// Send a message to an input. (local and remote)
	SendInputMessage(ctx context.Context, in *SendInputMessageRequest, opts ...grpc.CallOption) (*SendInputMessageResponse, error)
}

type interestAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewInterestAPIClient(cc grpc.ClientConnInterface) InterestAPIClient {
	return &interestAPIClient{cc}
}

func (c *interestAPIClient) FetchInterests(ctx context.Context, in *FetchInterestRequest, opts ...grpc.CallOption) (InterestAPI_FetchInterestsClient, error) {
	stream, err := c.cc.NewStream(ctx, &InterestAPI_ServiceDesc.Streams[0], InterestAPI_FetchInterests_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &interestAPIFetchInterestsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InterestAPI_FetchInterestsClient interface {
	Recv() (*FetchInterestResponse, error)
	grpc.ClientStream
}

type interestAPIFetchInterestsClient struct {
	grpc.ClientStream
}

func (x *interestAPIFetchInterestsClient) Recv() (*FetchInterestResponse, error) {
	m := new(FetchInterestResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *interestAPIClient) FetchLastStored(ctx context.Context, in *FetchLastStoredRequest, opts ...grpc.CallOption) (*FetchInterestResponse, error) {
	out := new(FetchInterestResponse)
	err := c.cc.Invoke(ctx, InterestAPI_FetchLastStored_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interestAPIClient) SendInputMessage(ctx context.Context, in *SendInputMessageRequest, opts ...grpc.CallOption) (*SendInputMessageResponse, error) {
	out := new(SendInputMessageResponse)
	err := c.cc.Invoke(ctx, InterestAPI_SendInputMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InterestAPIServer is the server API for InterestAPI service.
// All implementations should embed UnimplementedInterestAPIServer
// for forward compatibility
type InterestAPIServer interface {
	// Fetch feed data for this interest. (local and remote)
	FetchInterests(*FetchInterestRequest, InterestAPI_FetchInterestsServer) error
	// Fetch last data shared on this interest. (local and remote)
	FetchLastStored(context.Context, *FetchLastStoredRequest) (*FetchInterestResponse, error)
	// Send a message to an input. (local and remote)
	SendInputMessage(context.Context, *SendInputMessageRequest) (*SendInputMessageResponse, error)
}

// UnimplementedInterestAPIServer should be embedded to have forward compatible implementations.
type UnimplementedInterestAPIServer struct {
}

func (UnimplementedInterestAPIServer) FetchInterests(*FetchInterestRequest, InterestAPI_FetchInterestsServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchInterests not implemented")
}
func (UnimplementedInterestAPIServer) FetchLastStored(context.Context, *FetchLastStoredRequest) (*FetchInterestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchLastStored not implemented")
}
func (UnimplementedInterestAPIServer) SendInputMessage(context.Context, *SendInputMessageRequest) (*SendInputMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendInputMessage not implemented")
}

// UnsafeInterestAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InterestAPIServer will
// result in compilation errors.
type UnsafeInterestAPIServer interface {
	mustEmbedUnimplementedInterestAPIServer()
}

func RegisterInterestAPIServer(s grpc.ServiceRegistrar, srv InterestAPIServer) {
	s.RegisterService(&InterestAPI_ServiceDesc, srv)
}

func _InterestAPI_FetchInterests_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchInterestRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InterestAPIServer).FetchInterests(m, &interestAPIFetchInterestsServer{stream})
}

type InterestAPI_FetchInterestsServer interface {
	Send(*FetchInterestResponse) error
	grpc.ServerStream
}

type interestAPIFetchInterestsServer struct {
	grpc.ServerStream
}

func (x *interestAPIFetchInterestsServer) Send(m *FetchInterestResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _InterestAPI_FetchLastStored_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchLastStoredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterestAPIServer).FetchLastStored(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterestAPI_FetchLastStored_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterestAPIServer).FetchLastStored(ctx, req.(*FetchLastStoredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterestAPI_SendInputMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendInputMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterestAPIServer).SendInputMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterestAPI_SendInputMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterestAPIServer).SendInputMessage(ctx, req.(*SendInputMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InterestAPI_ServiceDesc is the grpc.ServiceDesc for InterestAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InterestAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "iotics.api.v2.InterestAPI",
	HandlerType: (*InterestAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchLastStored",
			Handler:    _InterestAPI_FetchLastStored_Handler,
		},
		{
			MethodName: "SendInputMessage",
			Handler:    _InterestAPI_SendInputMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchInterests",
			Handler:       _InterestAPI_FetchInterests_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "iotics/api/v2/interest.proto",
}
